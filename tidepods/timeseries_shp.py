# -*- coding: utf-8 -*-
"""
Created on Jan 2023

@author: ansu
"""
import pathlib
import os
import shutil
import subprocess
import datetime
import fiona
from mikeio import Dfs0, Dataset

VALID_LEVELS = ["LAT", "MSL"]


def read_shapefile_pts(shape):
    c = fiona.open(shape)
    pts = [p for p in c]
    return pts

def read_shapefile_props(shape):
    c = fiona.open(shape)

    crs = c.crs
    driver = c.driver
    schema = c.schema

    return crs, driver, schema


def write_pts(pts, tv, crs, driver, schema, outfile):

    for p, t in zip(pts, tv):
        p["properties"]["tide_level"] = t

    schema["properties"].update({"tide_level": "float:24.15"})

    with fiona.open(outfile, "w", crs=crs, driver=driver, schema=schema) as o:
        for p in pts:
            o.write(p)


def generate_pfs(pts, mikepath, tempdir, date):
    """Generate a pfs file using DHI.PFS.

    Parameters
    ----------
    pts : list
        List of shapely points generated by create_pts().
    mikepath : pathlib Path
        Path to MIKE installation directory.
    tempdir : str
        Path to the temporary working directory.

    Raises
    ------
    ValueError
        If DHI.PFS could not be imported or is not found in the mike folder.
    ValueError
        If the PFS file could not be created.

    """
    temppfs = os.path.join(tempdir, "temp.pfs")

    dhi_pfs_path = list(mikepath.glob("**/Mike SDK/**/*DHI.PFS.dll"))[0]
    constituents_path = list(
        mikepath.glob("**/global_tide_constituents_height_0.125deg.dfs2")
    )[0]
    prepack_path = list(mikepath.glob("**/Tide_Constituents/prepack.dat"))[0]

    import clr
    import System

    try:
        clr.AddReference(str(dhi_pfs_path))
        import DHI.PFS

    except (ImportError, System.IO.FileNotFoundException) as exception:
        msg = f'DHI.PFS not found. Is the path correct: "{dhi_pfs_path}"?'
        raise ValueError(msg) from exception

    # Begin PFS Generation Parameters using DHI.PFS.PFSBuilder

    pfsbuilder = DHI.PFS.PFSBuilder()

    pfsbuilder.AddTarget("TidePredictor")  # First Section

    pfsbuilder.AddKeyword("Name")
    pfsbuilder.AddString("Points Shapefile")
    pfsbuilder.AddKeyword("constituent_file_name")
    pfsbuilder.AddString(str(constituents_path))
    pfsbuilder.AddKeyword("prepack_file_name")
    pfsbuilder.AddString(str(prepack_path))

    pfsbuilder.AddKeyword("start_date")
    DHI.PFS.PFSExtensions.AddDate(pfsbuilder, System.DateTime(date.year-10, date.month, date.day))
    pfsbuilder.AddKeyword("end_date")
    DHI.PFS.PFSExtensions.AddDate(pfsbuilder, System.DateTime(date.year, date.month, date.day))
    pfsbuilder.AddKeyword("timestep")
    pfsbuilder.AddDouble(0.5)

    pfsbuilder.AddKeyword("number_of_files")
    pfsbuilder.AddInt(1)
    pfsbuilder.AddKeyword("ShowGeographic")
    pfsbuilder.AddInt(1)

    pfsbuilder.AddSection("File_1")  # File Section
    pfsbuilder.AddKeyword("format")
    pfsbuilder.AddInt(0)
    pfsbuilder.AddKeyword("file_name")
    pfsbuilder.AddFileName("temp.dfs0")
    pfsbuilder.AddKeyword("description")
    pfsbuilder.AddString("Predicted Tide Level")
    pfsbuilder.AddKeyword("number_of_points")
    pfsbuilder.AddInt(len(pts))

    # Points section enumerated for each point generated within shapefile

    for pid, p in enumerate(pts, 1):
        pfsbuilder.AddSection("Point_" + str(pid))
        pfsbuilder.AddKeyword("description")
        pfsbuilder.AddInt(pid)
        pfsbuilder.AddKeyword("y")
        pfsbuilder.AddDouble(p["geometry"]["coordinates"][1])
        pfsbuilder.AddKeyword("x")
        pfsbuilder.AddDouble(p["geometry"]["coordinates"][0])
        pfsbuilder.EndSection()

    pfsbuilder.EndSection()
    pfsbuilder.EndSection()
    pfsbuilder.Write(temppfs)

    if not os.path.exists(temppfs):
        raise ValueError("PFS file not created. Recheck creation options.")


def make_dfs0(mikepath, pfsfile):
    """Generate a dfs0 file from the input PFS in the same directory.

    Parameters
    ----------
    mikepath : str
        Path to MIKE installation directory.
    pfsfile : str
        Path to PFS file.

    Raises
    ------
    ValueError
        If the DFS file could not be created.
    """
    tp = str(list(mikepath.glob("**/TidePredictor.exe"))[0])
    cmd = [tp, pfsfile]
    try:
        subprocess.check_call(cmd, shell=True)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(
            "command '{}' return with error (code {}): {}".format(
                e.cmd, e.returncode, e.output
            )
        )
    dfsfile = pfsfile.replace(".pfs", ".dfs0")

    if not os.path.exists(dfsfile):
        raise ValueError(
            f"DFS file not created. Please check that you are connected to the VPN and that the path to the tide predictor is correct: {tp}."
        )


def main(shapefile, outfolder, date, timestamp):

    # mikepath = os.environ['MIKE'] = "C:\Program Files (x86)\DHI"
    mikepath = os.environ.get("MIKE")
    mikepath = pathlib.Path(mikepath)

    if not os.path.isdir(outfolder):
        os.makedirs(outfolder)

    shapefile_path = pathlib.Path(shapefile)
    shapefile_name = shapefile_path.stem
  
    pts = read_shapefile_pts(shapefile)


    tempfolder = os.path.join(outfolder, "temp")
    os.makedirs(tempfolder, exist_ok=True)

    generate_pfs(pts, mikepath, tempfolder, date)
   
    temp_pfs_path = str(list(pathlib.Path(tempfolder).glob("*.pfs"))[0])
    make_dfs0(mikepath, temp_pfs_path)
    temp_dfs0_path = str(list(pathlib.Path(tempfolder).glob("*.dfs0"))[0])

    date_time = datetime.datetime.combine(date, timestamp)

    dfs = Dfs0(temp_dfs0_path)
    df = dfs.to_dataframe()
    df = df.at_time(timestamp)
    df.rename(columns = {'Level (A':'tide'}, inplace = True)

    utfilename_csv = "_".join([str(date),"tides.csv"])
    outfile_csv = os.path.join(outfolder, utfilename_csv)

    df.to_csv(outfile_csv)
